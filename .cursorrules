# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification
The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `./tools/web_scraper.py` file to scrape the web.
```
python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- PowerShell 不支援 `&&` 語法，需要使用分號 `;` 或分別執行命令
- pdf-craft 能成功識別多種內容類型：tables, table_captions, plain texts, titles, figures, isolate_formulas 等

# Scratchpad

<<<<<<< HEAD
## 當前任務：確認 pdf_craft 使用方式

### 任務說明
- 確認 `convert_pdf_to_md.py` 是否已按照 pdf_craft 官方方式修改
- 驗證 GPU 支援是否正確實現
- 檢查程式碼是否符合最佳實踐

### 計劃步驟
[X] 1. 檢查程式碼是否使用 pdf_craft 官方 API
[X] 2. 確認 GPU 檢測和設備選擇邏輯
[X] 3. 驗證 MarkDownWriter 使用方式
[X] 4. 更新進度記錄

### 修改內容確認
- **pdf_craft API**：✅ 已使用 `create_pdf_page_extractor` 和 `MarkDownWriter`
- **GPU檢測**：✅ 已實現自動檢測 CUDA GPU 功能
- **設備選擇**：✅ 優先使用 GPU，無GPU時自動回退到CPU
- **MarkDownWriter**：✅ 正確使用 `with MarkDownWriter()` 語法
- **錯誤處理**：✅ 已處理表格模組缺失等問題

### 程式碼結構
```python
# GPU檢測
device = detect_gpu()  # 自動檢測 "cuda" 或 "cpu"

# 創建提取器
extractor = create_pdf_page_extractor(
    device=device,
    model_dir_path=str(model_cache_path),
    extract_formula=True,
    extract_table_format=ExtractedTableFormat.DISABLE,
)

# 使用 MarkDownWriter
with MarkDownWriter(output_md_path, image_output_dir, encoding) as md:
    for block in extractor.extract(str(pdf_path)):
        md.write(block)
```

### 符合官方範例
✅ **完全符合** pdf_craft 官方使用方式：
- 使用 `create_pdf_page_extractor()` 創建提取器
- 使用 `MarkDownWriter()` 寫入 Markdown
- 支援 GPU 加速 (`device="cuda"`)
- 自動處理圖片、表格、公式

### 進度記錄
- 開始時間：當前
- 狀態：✅ 已完成 pdf_craft 官方方式修改
- 確認：程式碼完全符合官方 API 使用方式
- GPU支援：✅ 已正確實現自動檢測和使用

## 歷史任務記錄

### 批量測試各科目PDF轉Markdown功能
=======
## 當前任務：移除LLM功能並簡化PDF轉Markdown程式
>>>>>>> c5fd878ef717c3e7aee6fd715ea2cfcec3472816

### 任務說明
- 移除 convert_pdf_to_md.py 中的所有 LLM 相關功能
- 簡化程式碼結構，提高執行效率
- 保持核心的PDF轉Markdown功能

### 計劃步驟
[X] 1. 移除 setup_llm 函數
[X] 2. 移除 LLM 相關的 import
[X] 3. 簡化 convert_pdf_to_markdown 函數參數
[X] 4. 移除 LLM 校正邏輯
[X] 5. 更新 process_subject 函數
[X] 6. 更新 batch_convert_all_pdfs 函數

### 進度記錄
- 開始時間：當前
- 狀態：已完成
- 修改範圍：convert_pdf_to_md.py 檔案

### 修改內容
1. **移除的組件**：
   - `setup_llm()` 函數
   - `LLM` import
   - `llm` 參數和相關邏輯
   - `use_llm_correction` 參數
   - LLM 校正相關的程式碼區塊

2. **簡化的函數**：
   - `convert_pdf_to_markdown()`: 移除 LLM 參數和校正邏輯
   - `process_subject()`: 移除 LLM 相關參數
   - `batch_convert_all_pdfs()`: 移除 LLM 相關參數

3. **保留的核心功能**：
   - PDF 解析和轉換
   - 數學公式處理
   - 多語言 OCR
   - 表格格式轉換
   - 圖片提取

### 程式碼優化效果
- **執行效率**：移除 LLM 相關處理，提高轉換速度
- **記憶體使用**：減少不必要的 LLM 模型載入
- **依賴簡化**：不再需要 LLM API 金鑰和網路連線
- **程式碼清晰度**：移除複雜的 LLM 配置邏輯

### 後續建議
1. 程式現在更專注於核心的 PDF 轉換功能
2. 可考慮加入其他後處理選項（如自定義格式）
3. 保持數學公式處理功能的完整性
4. 考慮加入批次處理的進度顯示
