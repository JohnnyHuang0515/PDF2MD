# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification
The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `./tools/web_scraper.py` file to scrape the web.
```
python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- PowerShell 不支援 `&&` 語法，需要使用分號 `;` 或分別執行命令
- pdf-craft 能成功識別多種內容類型：tables, table_captions, plain texts, titles, figures, isolate_formulas 等

# Scratchpad

## 當前任務：解決Git合併衝突並保留簡化版本

### 任務說明
- 解決 convert_pdf_to_md.py 中的 Git 合併衝突
- 保留 c5fd878 版本（簡化版本，移除 LLM 功能）
- 確保程式碼結構清晰且功能完整

### 計劃步驟
[X] 1. 檢查檔案中的合併衝突標記
[X] 2. 選擇保留 c5fd878 版本（簡化版本）
[X] 3. 移除所有合併衝突標記
[X] 4. 驗證程式碼結構和功能
[X] 5. 更新進度記錄

### 進度記錄
- 開始時間：當前
- 狀態：✅ 已完成合併衝突解決
- 修改範圍：convert_pdf_to_md.py 檔案

### 解決的衝突
1. **Import 語句**：
   - 保留：`from pdf_craft import create_pdf_page_extractor, MarkDownWriter, ExtractedTableFormat, analyse, CorrectionMode`
   - 移除：LLM 相關的 import

2. **函數結構**：
   - 保留：簡化的 `convert_pdf_to_markdown()` 函數
   - 移除：複雜的多進程處理函數
   - 保留：`batch_convert_all_pdfs()` 單線程版本

3. **主要功能**：
   - 保留：PDF 轉換核心功能
   - 保留：數學公式處理
   - 保留：多語言 OCR
   - 移除：LLM 校正功能
   - 移除：複雜的進度追蹤和並行處理

### 最終程式碼特點
- **簡潔性**：移除複雜的 LLM 和多進程邏輯
- **可讀性**：程式碼結構清晰，易於理解和維護
- **功能性**：保留核心的 PDF 轉 Markdown 功能
- **穩定性**：減少依賴，提高執行穩定性

### 程式碼結構
```python
# 主要函數
def convert_pdf_to_markdown()  # 單個PDF轉換
def batch_convert_all_pdfs()   # 批次轉換所有PDF
def validate_pdf_file()        # PDF檔案驗證
def process_math_formulas()    # 數學公式處理

# 設定
device = "cuda"  # 或 "cpu"
extract_table_format = ExtractedTableFormat.MARKDOWN
```

### 使用方式
```bash
python convert_pdf_to_md.py
```

## 歷史任務記錄

### 批量測試各科目PDF轉Markdown功能
